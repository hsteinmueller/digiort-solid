{"version":3,"sources":["components/welcome/welcome.component.js","components/layout/layout.js","components/utils.js","components/login/index.js","components/login/login.component.js","components/nav-bar/index.js","components/nav-bar/nav-bar.component.js","components/welcome/index.js","routes.js","App.js","reportWebVitals.js","index.js"],"names":["Component","Loader","withWebId","props","component","webId","rest","to","getLocation","href","redirect","loc","split","length","Error","LoginComponent","callBackUri","window","location","rel","target","className","callbackUri","NavBar","memo","logOut","a","auth","logout","logoutRedirect","authConfig","JSON","parse","localStorage","getItem","rpConfig","registration","post_logout_redirect_uris","provider","configuration","end_session_endpoint","removeItem","console","log","onClick","WelcomeComponent","this","undefined","React","Routes","path","exact","from","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+aAiB2BA,EAAWC,E,6FCLvBC,uBATA,SAACC,GAAW,IACNH,EAA8BG,EAAzCC,UAAsBC,EAAmBF,EAAnBE,MAAUC,EADhB,YACyBH,EADzB,uBAExB,OAAQE,EAGN,cAAC,IAAD,CAAUE,GAAG,aAFb,cAAC,IAAD,aAAOH,UAAWJ,GAAeM,OCNxBE,EAAc,SAACC,EAAMC,GAChC,IAAIC,EAAMF,EAAKG,MAAM,MACrB,GAAID,EAAIE,OAAS,EAEf,OADAF,EAAMA,EAAI,GAAKD,EAGf,MAAM,IAAII,OCJCC,ECEQ,WAErB,IAAMC,EAAcR,EAAYS,OAAOC,SAAST,KAAM,eACtD,OACE,gCACE,mBACEA,KAAK,2CACLU,IAAI,sBACJC,OAAO,SACPC,UAAU,OAJZ,2CAQA,cAAC,gBAAD,CAAeC,YAAaN,Q,uECfnBO,ECGAC,gBAAK,SAACrB,GACDA,EAAVE,MADsB,IAGxBoB,EAAM,uCAAG,8BAAAC,EAAA,+EAELC,IAAKC,SAFA,OAIPC,EAAiB,YAKfC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,uBAGpCC,SAASC,aAAaC,4BAEnCR,EACEC,EAAWK,SAASG,SAASC,cAAcC,sBAI/CP,aAAaQ,WAAW,qBAIxBxB,OAAOC,SAAWV,EAAYS,OAAOC,SAAST,KAAMoB,GAvBzC,kDAyBXa,QAAQC,IAAI,qBAzBD,0DAAH,qDA6BZ,OAAO,wBAAQC,QAASnB,EAAjB,uBCnCMoB,GPeY7C,EAZF,SAACG,GAAW,IAC3BE,EAAUF,EAAVE,MAER,OACE,eAAC,WAAD,WACE,cAAC,EAAD,eAAYA,IACZ,4CAOJH,oBAAS,4JAEL,WAEE,OADkB4C,KAAK3C,MAAfE,OAEN,UAAK0C,EACH,OAAO9C,GAAU,KACnB,KAAK,KAMH,OADAgB,OAAOC,SAAWV,EAAYS,OAAOC,SAAST,KAAM,YAC7C,KACT,QACE,OAAO,cAACT,EAAD,eAAe8C,KAAK3C,aAf5B,GACyB6C,IAAMhD,aQM3BiD,EAbA,kBACb,cAAC,IAAD,UACE,cAAC,WAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAQ7C,UAAWW,EAAgBmC,KAAK,SAASC,OAAK,IACtD,cAAC,IAAD,CAAUC,KAAK,IAAI7C,GAAG,WAAW4C,OAAK,IACtC,cAAC,IAAD,CAAOD,KAAK,WAAW9C,UAAWyC,IAClC,cAAC,IAAD,CAAUtC,GAAG,iBCRN8C,MARf,WACE,OACE,cAAC,WAAD,UACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e24f2bcf.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport NavBar from \"../nav-bar\";\nimport { withWebId } from \"@inrupt/solid-react-components\";\nimport { getLocation } from \"../utils\";\n\nconst WelcomeComponent = (props) => {\n  const { webId } = props;\n\n  return (\n    <Fragment>\n      <NavBar {...webId} />\n      <div>hello</div>\n    </Fragment>\n  );\n};\n\n// this is the fix for HashRouter, copied from source\nconst withAuthorization = (Component, Loader) =>\n  withWebId(\n    class WithAuthorization extends React.Component {\n      render() {\n        const { webId } = this.props;\n        switch (webId) {\n          case undefined:\n            return Loader || null;\n          case null:\n            // Using the non-SPA redirect here to clear the state when the user is not logged in\n            // This helps with making sure state is fully clean on login, and addresses an issue with\n            // the react-router-dom v5 upgrade, which didn't like using <Redirect> here\n            // window.location.href = \"/#/login\"; // <= this is the fix\n            window.location = getLocation(window.location.href, \"/#/login\");\n            return null;\n          default:\n            return <Component {...this.props} />;\n        }\n      }\n    }\n  );\n\nexport default withAuthorization(WelcomeComponent);\n","import { Route, Redirect } from \"react-router-dom\";\r\nimport { withWebId } from \"@inrupt/solid-react-components\";\r\n\r\nconst Layout = (props) => {\r\n  const { component: Component, webId, ...rest } = props;\r\n  return !webId ? (\r\n    <Route component={Component} {...rest} />\r\n  ) : (\r\n    <Redirect to=\"/welcome\" />\r\n  );\r\n};\r\n\r\nexport default withWebId(Layout);\r\n","export const getLocation = (href, redirect) => {\r\n  let loc = href.split(\"/#\");\r\n  if (loc.length > 1) {\r\n    loc = loc[0] + redirect;\r\n    return loc;\r\n  } else {\r\n    throw new Error();\r\n  }\r\n};\r\n","import LoginComponent from './login.component';\n\nexport default LoginComponent;\n","import React from \"react\";\nimport { ProviderLogin } from \"@inrupt/solid-react-components\";\nimport { getLocation } from \"../utils\";\n\nconst LoginComponent = () => {\n  // const callbackUri = `${window.location.href}/#/welcome#`;\n  const callBackUri = getLocation(window.location.href, \"/#/welcome#\"); // hashtag at the end is important for redirect\n  return (\n    <div>\n      <a\n        href=\"https://solidproject.org/users/get-a-pod\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        className=\"link\"\n      >\n        Register for a solid identity\n      </a>\n      <ProviderLogin callbackUri={callBackUri} />\n    </div>\n  );\n};\n\nexport default LoginComponent;\n","import NavBar from './nav-bar.component';\n\nexport default NavBar;\n","import React, { memo } from \"react\";\n\nimport auth from \"solid-auth-client\";\nimport { getLocation } from \"../utils\";\n\nconst NavBar = memo((props) => {\n  const { webId } = props;\n\n  const logOut = async () => {\n    try {\n      await auth.logout();\n\n      let logoutRedirect = \"/#/login\";\n      // It seems that solid-auth-client has an OIDC-compliance issue in the logout.\n      // This bevahiour is accepted by the NSS IdP, but not by other OIDC-compliant IdPs.\n      // This issue should be fixed in the upstream library, but in the meantime\n      // the following is an acceptable **temporary** compatibility fix.\n      const authConfig = JSON.parse(localStorage.getItem(\"solid-auth-client\"));\n      // It happens that post_logout_redirect_uris is not defined by NSS IdP,\n      // which enables discriminating when the issue is going to be encountered.\n      if (authConfig.rpConfig.registration.post_logout_redirect_uris) {\n        // The user MUST be redirected to a page where they confirm they want to logout.\n        logoutRedirect =\n          authConfig.rpConfig.provider.configuration.end_session_endpoint;\n      }\n\n      // Remove localStorage\n      localStorage.removeItem(\"solid-auth-client\");\n\n      // Redirect to login page or to logout confirmation\n      // window.location = logoutRedirect; // this doesn't work for urls with subpath\n      window.location = getLocation(window.location.href, logoutRedirect);\n    } catch (error) {\n      console.log(\"error logging out\");\n    }\n  };\n\n  return <button onClick={logOut}>LOGOUT</button>;\n});\n\nexport default NavBar;\n","import WelcomeComponent from \"./welcome.component\";\n\nexport default WelcomeComponent;\n","import React, { Fragment } from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  // BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Layout from \"./components/layout/layout\";\r\nimport LoginComponent from \"./components/login\";\r\nimport WelcomeComponent from \"./components/welcome\";\r\n\r\nconst Routes = () => (\r\n  <Router>\r\n    <Fragment>\r\n      <Switch>\r\n        <Layout component={LoginComponent} path=\"/login\" exact />\r\n        <Redirect from=\"/\" to=\"/welcome\" exact />\r\n        <Route path=\"/welcome\" component={WelcomeComponent} />\r\n        <Redirect to=\"/404\" />\r\n      </Switch>\r\n    </Fragment>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { Fragment } from \"react\";\nimport Routes from \"./routes\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <Routes />\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}